{"version":3,"file":"static/js/40.f298e317.chunk.js","mappings":"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","sources":["webpack://s-quest-2/./src/pages/Result/ResultPage.module.css?b5a2","webpack://s-quest-2/./src/components/ResultQuestion/ResultQuestion.module.css?3c30","components/ResultQuestion/ResultQuestion.jsx","webpack://s-quest-2/./src/components/ResultsError/ResultsError.module.css?09f3","components/ResultsError/ResultsError.jsx","pages/Result/Result.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"resultPage\":\"ResultPage_resultPage__uSIVR\",\"resultHeader\":\"ResultPage_resultHeader__w2z9E\",\"testName\":\"ResultPage_testName__0mOQS\",\"resultCounter\":\"ResultPage_resultCounter__S6C1K\"};","// extracted by mini-css-extract-plugin\nexport default {\"question\":\"ResultQuestion_question__YjTNx\",\"questionHeader\":\"ResultQuestion_questionHeader__LF0N0\",\"questionNumber\":\"ResultQuestion_questionNumber__sj4Aj\",\"falseAnswer\":\"ResultQuestion_falseAnswer__SOQsu\",\"correctAnswer\":\"ResultQuestion_correctAnswer__Mxt9-\",\"questionName\":\"ResultQuestion_questionName__VprgN\",\"answerWrap\":\"ResultQuestion_answerWrap__FbDxR\",\"falseAnswerIcon\":\"ResultQuestion_falseAnswerIcon__aotm3\",\"userAnswer\":\"ResultQuestion_userAnswer__SRvFl\",\"rightAnswer\":\"ResultQuestion_rightAnswer__lfSrY\"};","import React from \"react\";\r\nimport styles from \"./ResultQuestion.module.css\";\r\n\r\nconst ResultQuestion = ({ question, results, index }) => {\r\n   const isAnswerCorrect =\r\n      question.answers[results[index].selectedAnswerIndex] ===\r\n      question.answers[results[index].correctAnswerIndex];\r\n\r\n   const answerStatusStyle = isAnswerCorrect\r\n      ? styles.correctAnswer\r\n      : styles.falseAnswer;\r\n\r\n   return (\r\n      <li className={[styles.question, answerStatusStyle].join(\" \")}>\r\n         <header className={styles.questionHeader}>\r\n            <p className={[styles.questionNumber, answerStatusStyle].join(\" \")}>\r\n               {index + 1}\r\n            </p>\r\n            <p className={styles.questionName}>{question.title}</p>\r\n         </header>\r\n\r\n         <div className={styles.answerWrap}>\r\n            <p className={styles.userAnswer}>\r\n               Ваш ответ:{\" \"}\r\n               {question.answers[results[index]?.selectedAnswerIndex]}\r\n            </p>\r\n         </div>\r\n         {!isAnswerCorrect && (\r\n            <p className={styles.rightAnswer}>\r\n               <span>Правильный ответ:</span>{\" \"}\r\n               {question.answers[results[index]?.correctAnswerIndex]}\r\n            </p>\r\n         )}\r\n      </li>\r\n   );\r\n};\r\n\r\nexport default ResultQuestion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ResultsError_content__x7VGr\",\"title\":\"ResultsError_title__qHrIP\",\"links\":\"ResultsError_links__Hxaz2\",\"link\":\"ResultsError_link__OL1lM\"};","import React from \"react\";\r\nimport styles from \"./ResultsError.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ResultsError = ({ testId }) => {\r\n   return (\r\n      <div className={[styles.content, \"wrapper\"].join(\" \")}>\r\n         <h1 className={styles.title}>Вы ещё не прошли этот тест</h1>\r\n         <div className={styles.links}>\r\n            <Link to={`/tests/${testId}`} className={styles.link}>\r\n               Перейти к тесту\r\n            </Link>\r\n            <Link to=\"/tests\" className={styles.link}>\r\n               На страницу тестов\r\n            </Link>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ResultsError;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styles from \"./ResultPage.module.css\";\r\nimport ResultQuestion from \"../../components/ResultQuestion/ResultQuestion\";\r\nimport ResultsError from \"../../components/ResultsError/ResultsError\";\r\nimport { testAPI } from \"../../services/TestService\";\r\n\r\nconst Result = () => {\r\n   let { id } = useParams();\r\n   id = +id;\r\n\r\n   const testResults = useSelector((state) => state.test.results).find(\r\n      (result) => result.testId === id\r\n   );\r\n\r\n   const {data: test, error, isLoading} = testAPI.useFetchTestQuery(id)\r\n\r\n   if (!testResults) return <ResultsError testId={id}/>;\r\n\r\n   const resultCounter = testResults.resultCounter;\r\n\r\n   return (\r\n      isLoading ? (<p>Loading</p>) :\r\n      <main className={styles.resultPage}>\r\n         <div className={[styles.content, \"wrapper\"].join(\" \")}>\r\n            <header className={styles.resultHeader}>\r\n               <h1 className={styles.testName}>{test.name}</h1>\r\n               <p className={styles.resultCounter}>\r\n                  Результат: {resultCounter} / {test.questions.length}\r\n               </p>\r\n            </header>\r\n\r\n            <ul className={styles.questions}>\r\n               {test.questions.map((question, i) => (\r\n                  <ResultQuestion\r\n                     key={i}\r\n                     question={question}\r\n                     results={testResults.results}\r\n                     index={i}\r\n                  />\r\n               ))}\r\n            </ul>\r\n         </div>\r\n      </main>\r\n   );\r\n};\r\n\r\nexport default Result;\r\n"],"names":["_ref","_results$index","_results$index2","question","results","index","isAnswerCorrect","answers","selectedAnswerIndex","correctAnswerIndex","answerStatusStyle","styles","correctAnswer","falseAnswer","_jsxs","className","join","children","questionHeader","_jsx","questionNumber","questionName","title","answerWrap","userAnswer","rightAnswer","testId","content","links","Link","to","concat","link","Result","id","useParams","testResults","useSelector","state","test","find","result","data","error","isLoading","testAPI","useFetchTestQuery","ResultsError","resultCounter","resultPage","resultHeader","testName","name","questions","length","map","i","ResultQuestion"],"sourceRoot":""}