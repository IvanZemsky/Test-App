{"version":3,"file":"static/js/828.03ee0c19.chunk.js","mappings":"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","sources":["webpack://s-quest-2/./src/components/Loading/Loading.module.css?25ee","components/Loading/Loading.jsx","webpack://s-quest-2/./src/pages/Result/ResultPage.module.css?b5a2","webpack://s-quest-2/./src/components/ResultQuestion/ResultQuestion.module.css?3c30","components/ResultQuestion/ResultQuestion.jsx","webpack://s-quest-2/./src/components/EmptyResult/EmptyResult.module.css?43e2","components/EmptyResult/EmptyResult.jsx","pages/Result/Result.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Loading_container__UNdXp\",\"loader\":\"Loading_loader__yIJWx\",\"rotation\":\"Loading_rotation__0M0Bh\"};","import styles from './Loading.module.css'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.loader}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","// extracted by mini-css-extract-plugin\nexport default {\"resultPage\":\"ResultPage_resultPage__uSIVR\",\"resultHeader\":\"ResultPage_resultHeader__w2z9E\",\"testName\":\"ResultPage_testName__0mOQS\",\"resultCounter\":\"ResultPage_resultCounter__S6C1K\"};","// extracted by mini-css-extract-plugin\nexport default {\"question\":\"ResultQuestion_question__YjTNx\",\"selectedAnswer\":\"ResultQuestion_selectedAnswer__hmCcC\",\"questionHeader\":\"ResultQuestion_questionHeader__LF0N0\",\"questionNumber\":\"ResultQuestion_questionNumber__sj4Aj\",\"falseAnswer\":\"ResultQuestion_falseAnswer__SOQsu\",\"correctAnswer\":\"ResultQuestion_correctAnswer__Mxt9-\",\"questionName\":\"ResultQuestion_questionName__VprgN\",\"answerWrap\":\"ResultQuestion_answerWrap__FbDxR\",\"falseAnswerIcon\":\"ResultQuestion_falseAnswerIcon__aotm3\",\"userAnswerText\":\"ResultQuestion_userAnswerText__99cvY\",\"rightAnswer\":\"ResultQuestion_rightAnswer__lfSrY\"};","import React from \"react\";\r\nimport styles from \"./ResultQuestion.module.css\";\r\n\r\nconst ResultQuestion = ({ question, results, index }) => {\r\n   const isAnswerCorrect =\r\n      question.answers[results[index]?.selectedAnswerIndex] ===\r\n      question.answers[results[index]?.correctAnswerIndex];\r\n\r\n   const answerStatusStyle = isAnswerCorrect\r\n      ? styles.correctAnswer\r\n      : styles.falseAnswer;\r\n\r\n   return (\r\n      <li className={[styles.question, answerStatusStyle].join(\" \")}>\r\n         <div className={styles.selectedAnswer}>\r\n            <header className={styles.questionHeader}>\r\n               <p className={[styles.questionNumber, answerStatusStyle].join(\" \")}>\r\n                  {index + 1}\r\n               </p>\r\n               <p className={styles.questionName}>{question.title}</p>\r\n            </header>\r\n\r\n            <div className={styles.answerWrap}>\r\n               <p className={styles.userAnswerText}>\r\n                  Ваш ответ:{\" \"}\r\n                  {question.answers[results[index]?.selectedAnswerIndex]}\r\n               </p>\r\n            </div>\r\n         </div>\r\n         {!isAnswerCorrect && (\r\n            <p className={styles.rightAnswer}>\r\n               <span>Правильный ответ:</span>{\" \"}\r\n               {question.answers[results[index]?.correctAnswerIndex]}\r\n            </p>\r\n         )}\r\n      </li>\r\n   );\r\n};\r\n\r\nexport default ResultQuestion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"emptyResult\":\"EmptyResult_emptyResult__5uDK7\",\"content\":\"EmptyResult_content__oCI49\",\"title\":\"EmptyResult_title__AXdB3\",\"links\":\"EmptyResult_links__Xv-4D\",\"link\":\"EmptyResult_link__z3okp\"};","import React from \"react\";\r\nimport styles from \"./EmptyResult.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Wrapper from './../UI/Wrapper/Wrapper';\r\n\r\nconst EmptyResult = ({ testId }) => {\r\n   return (\r\n      <Wrapper>\r\n         <div className={styles.emptyResult}>\r\n         <div className={styles.content}>\r\n            <h1 className={styles.title}>Вы ещё не прошли этот тест</h1>\r\n            <div className={styles.links}>\r\n               <Link to={`/tests/${testId}`} className={styles.link}>\r\n                  Перейти к тесту\r\n               </Link>\r\n               <Link to=\"/tests\" className={styles.link}>\r\n                  На страницу тестов\r\n               </Link>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default EmptyResult;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styles from \"./ResultPage.module.css\";\r\nimport ResultQuestion from \"../../components/ResultQuestion/ResultQuestion\";\r\nimport EmptyResult from \"../../components/EmptyResult/EmptyResult\";\r\nimport { testAPI } from \"../../services/TestService\";\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport Wrapper from \"./../../components/UI/Wrapper/Wrapper\";\r\n\r\nconst Result = () => {\r\n   let { id } = useParams();\r\n   id = +id;\r\n\r\n   const testResults = useSelector((state) => state.test.results).find(\r\n      (result) => result.testId === id\r\n   );\r\n\r\n   const { data: test, error, isLoading } = testAPI.useFetchTestQuery(id);\r\n\r\n   if (!testResults) return <EmptyResult testId={id} />;\r\n\r\n   const resultCounter = testResults.resultCounter;\r\n\r\n   return isLoading ? <Loading /> : (\r\n      <Wrapper>\r\n         <main className={styles.resultPage}>\r\n            <header className={styles.resultHeader}>\r\n               <h1 className={styles.testName}>{test.name}</h1>\r\n               <p className={styles.resultCounter}>\r\n                  Результат: {resultCounter} / {test.questions.length}\r\n               </p>\r\n            </header>\r\n\r\n            <ul className={styles.questions}>\r\n               {test.questions.map((question, i) => (\r\n                  <ResultQuestion\r\n                     key={i}\r\n                     question={question}\r\n                     results={testResults.results}\r\n                     index={i}\r\n                  />\r\n               ))}\r\n            </ul>\r\n         </main>\r\n      </Wrapper>\r\n   );\r\n};\r\n\r\nexport default Result;\r\n"],"names":["Loading","_jsx","className","styles","children","_ref","_results$index","_results$index2","_results$index3","_results$index4","question","results","index","isAnswerCorrect","answers","selectedAnswerIndex","correctAnswerIndex","answerStatusStyle","correctAnswer","falseAnswer","_jsxs","join","selectedAnswer","questionHeader","questionNumber","questionName","title","answerWrap","userAnswerText","rightAnswer","testId","Wrapper","Link","to","concat","Result","id","useParams","testResults","useSelector","state","test","find","result","data","error","isLoading","testAPI","useFetchTestQuery","EmptyResult","resultCounter","resultPage","resultHeader","testName","name","questions","length","map","i","ResultQuestion"],"sourceRoot":""}